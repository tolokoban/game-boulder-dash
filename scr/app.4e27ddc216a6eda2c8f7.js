"use strict";(self.webpackChunkboulder_dash=self.webpackChunkboulder_dash||[]).push([[143],{424:(e,t,r)=>{r.d(t,{Z:()=>s});var n=r(537),o=r.n(n),a=r(645),i=r.n(a)()(o());i.push([e.id,"body,\nhtml {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    left: 0;\n    top: 0;\n    margin: 0;\n    padding: 0;\n    overflow: hidden;\n}\n\nbody > canvas#canvas {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    left: 0;\n    top: 0;\n    margin: 0;\n    background-color: #000;\n}\n\n#tgd-logo.vanish {\n    --duration: 900ms;\n    transition: all var(--duration);\n    opacity: 0;\n}\n\n#tgd-logo > progress {\n    position: absolute;\n    left: 1rem;\n    top: 50%;\n    height: 1rem;\n    margin-top: -0.5rem;\n    width: calc(100% - 2rem);\n    box-shadow: 0 0 1rem .5rem #0007;\n    overflow: visible;\n}\n\n:root {\n    --theme-color-screen: #321;\n    --theme-color-primary: #d70;\n    --theme-color-primary-light: #f92;\n    --theme-color-primary-dark: #740;\n}\n\nprogress[value] {\n    box-sizing: border-box;\n    margin: 1rem 0;\n    appearance: none;\n    border: none;\n    height: 0.5rem;\n    background-image: linear-gradient(\n            to top,\n            transparent,\n            transparent 50%,\n            #fff7 50%,\n            #fff7\n        ),\n        linear-gradient(var(--theme-color-screen), var(--theme-color-screen));\n    border-radius: 0.5rem;\n    box-shadow: 0 0.125rem 0.25rem #0007 inset, 0 -0.125rem 0.25rem #fff7 inset;\n    position: relative;\n    overflow: hidden;\n}\n\nprogress[value]::-webkit-progress-bar {\n    background-image: linear-gradient(\n            to top,\n            transparent,\n            transparent 50%,\n            #fff7 50%,\n            #fff7\n        ),\n        linear-gradient(var(--theme-color-screen), var(--theme-color-screen));\n    border-radius: 0.5rem;\n    box-shadow: 0 0.125rem 0.25rem #0007 inset, 0 -0.125rem 0.25rem #fff7 inset;\n}\n\nprogress[value]::-webkit-progress-value {\n    background-size: 100% 100%, 1.5rem 1rem, 100% 100%;\n    border-radius: 0.5rem;\n    box-shadow: 0 0 0.5rem var(--theme-color-primary);\n    background-image: linear-gradient(\n            to top,\n            transparent,\n            transparent 50%,\n            #fff7 50%,\n            #fff7\n        ),\n        linear-gradient(\n            135deg,\n            transparent,\n            transparent 33%,\n            #0002 33%,\n            #0002 66%,\n            transparent 66%\n        ),\n        linear-gradient(\n            to top,\n            var(--theme-color-primary-light),\n            var(--theme-color-primary-dark)\n        );\n}\n\nprogress[value]::-moz-progress-bar {\n    background-image: linear-gradient(\n            to top,\n            transparent,\n            transparent 50%,\n            #fff7 50%,\n            #fff7\n        ),\n        linear-gradient(\n            135deg,\n            transparent,\n            transparent 33%,\n            #0002 33%,\n            #0002 66%,\n            transparent 66%\n        ),\n        linear-gradient(\n            to top,\n            var(--theme-color-primary-light),\n            var(--theme-color-primary-dark)\n        );\n    background-size: 100% 100%, 1.5rem 1rem, 100% 100%;\n    border-radius: 0.5rem;\n    box-shadow: 0 0 .5rem .5rem #ff8e;\n}\n","",{version:3,sources:["webpack://./src/index.css"],names:[],mappings:"AAAA;;IAEI,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,OAAO;IACP,MAAM;IACN,SAAS;IACT,UAAU;IACV,gBAAgB;AACpB;;AAEA;IACI,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,OAAO;IACP,MAAM;IACN,SAAS;IACT,sBAAsB;AAC1B;;AAEA;IACI,iBAAiB;IACjB,+BAA+B;IAC/B,UAAU;AACd;;AAEA;IACI,kBAAkB;IAClB,UAAU;IACV,QAAQ;IACR,YAAY;IACZ,mBAAmB;IACnB,wBAAwB;IACxB,gCAAgC;IAChC,iBAAiB;AACrB;;AAEA;IACI,0BAA0B;IAC1B,2BAA2B;IAC3B,iCAAiC;IACjC,gCAAgC;AACpC;;AAEA;IACI,sBAAsB;IACtB,cAAc;IACd,gBAAgB;IAChB,YAAY;IACZ,cAAc;IACd;;;;;;;6EAOyE;IACzE,qBAAqB;IACrB,2EAA2E;IAC3E,kBAAkB;IAClB,gBAAgB;AACpB;;AAEA;IACI;;;;;;;6EAOyE;IACzE,qBAAqB;IACrB,2EAA2E;AAC/E;;AAEA;IACI,kDAAkD;IAClD,qBAAqB;IACrB,iDAAiD;IACjD;;;;;;;;;;;;;;;;;;;SAmBK;AACT;;AAEA;IACI;;;;;;;;;;;;;;;;;;;SAmBK;IACL,kDAAkD;IAClD,qBAAqB;IACrB,iCAAiC;AACrC",sourcesContent:["body,\nhtml {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    left: 0;\n    top: 0;\n    margin: 0;\n    padding: 0;\n    overflow: hidden;\n}\n\nbody > canvas#canvas {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    left: 0;\n    top: 0;\n    margin: 0;\n    background-color: #000;\n}\n\n#tgd-logo.vanish {\n    --duration: 900ms;\n    transition: all var(--duration);\n    opacity: 0;\n}\n\n#tgd-logo > progress {\n    position: absolute;\n    left: 1rem;\n    top: 50%;\n    height: 1rem;\n    margin-top: -0.5rem;\n    width: calc(100% - 2rem);\n    box-shadow: 0 0 1rem .5rem #0007;\n    overflow: visible;\n}\n\n:root {\n    --theme-color-screen: #321;\n    --theme-color-primary: #d70;\n    --theme-color-primary-light: #f92;\n    --theme-color-primary-dark: #740;\n}\n\nprogress[value] {\n    box-sizing: border-box;\n    margin: 1rem 0;\n    appearance: none;\n    border: none;\n    height: 0.5rem;\n    background-image: linear-gradient(\n            to top,\n            transparent,\n            transparent 50%,\n            #fff7 50%,\n            #fff7\n        ),\n        linear-gradient(var(--theme-color-screen), var(--theme-color-screen));\n    border-radius: 0.5rem;\n    box-shadow: 0 0.125rem 0.25rem #0007 inset, 0 -0.125rem 0.25rem #fff7 inset;\n    position: relative;\n    overflow: hidden;\n}\n\nprogress[value]::-webkit-progress-bar {\n    background-image: linear-gradient(\n            to top,\n            transparent,\n            transparent 50%,\n            #fff7 50%,\n            #fff7\n        ),\n        linear-gradient(var(--theme-color-screen), var(--theme-color-screen));\n    border-radius: 0.5rem;\n    box-shadow: 0 0.125rem 0.25rem #0007 inset, 0 -0.125rem 0.25rem #fff7 inset;\n}\n\nprogress[value]::-webkit-progress-value {\n    background-size: 100% 100%, 1.5rem 1rem, 100% 100%;\n    border-radius: 0.5rem;\n    box-shadow: 0 0 0.5rem var(--theme-color-primary);\n    background-image: linear-gradient(\n            to top,\n            transparent,\n            transparent 50%,\n            #fff7 50%,\n            #fff7\n        ),\n        linear-gradient(\n            135deg,\n            transparent,\n            transparent 33%,\n            #0002 33%,\n            #0002 66%,\n            transparent 66%\n        ),\n        linear-gradient(\n            to top,\n            var(--theme-color-primary-light),\n            var(--theme-color-primary-dark)\n        );\n}\n\nprogress[value]::-moz-progress-bar {\n    background-image: linear-gradient(\n            to top,\n            transparent,\n            transparent 50%,\n            #fff7 50%,\n            #fff7\n        ),\n        linear-gradient(\n            135deg,\n            transparent,\n            transparent 33%,\n            #0002 33%,\n            #0002 66%,\n            transparent 66%\n        ),\n        linear-gradient(\n            to top,\n            var(--theme-color-primary-light),\n            var(--theme-color-primary-dark)\n        );\n    background-size: 100% 100%, 1.5rem 1rem, 100% 100%;\n    border-radius: 0.5rem;\n    box-shadow: 0 0 .5rem .5rem #ff8e;\n}\n"],sourceRoot:""}]);const s=i},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var r="",n=void 0!==t[5];return t[4]&&(r+="@supports (".concat(t[4],") {")),t[2]&&(r+="@media ".concat(t[2]," {")),n&&(r+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),r+=e(t),n&&(r+="}"),t[2]&&(r+="}"),t[4]&&(r+="}"),r})).join("")},t.i=function(e,r,n,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(n)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var l=0;l<e.length;l++){var u=[].concat(e[l]);n&&i[u[0]]||(void 0!==a&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=a),r&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=r):u[2]=r),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),t.push(u))}},t}},537:e=>{e.exports=function(e){var t=e[1],r=e[3];if(!r)return t;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),a="/*# ".concat(o," */"),i=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[t].concat(i).concat([a]).join("\n")}return[t].join("\n")}},981:(e,t,r)=>{r.r(t),r.d(t,{default:()=>v});var n=r(379),o=r.n(n),a=r(795),i=r.n(a),s=r(569),c=r.n(s),l=r(565),u=r.n(l),f=r(216),d=r.n(f),p=r(589),h=r.n(p),m=r(424),A={};A.styleTagTransform=h(),A.setAttributes=u(),A.insert=c().bind(null,"head"),A.domAPI=i(),A.insertStyleElement=d(),o()(m.Z,A);const v=m.Z&&m.Z.locals?m.Z.locals:void 0},379:e=>{var t=[];function r(e){for(var r=-1,n=0;n<t.length;n++)if(t[n].identifier===e){r=n;break}return r}function n(e,n){for(var a={},i=[],s=0;s<e.length;s++){var c=e[s],l=n.base?c[0]+n.base:c[0],u=a[l]||0,f="".concat(l," ").concat(u);a[l]=u+1;var d=r(f),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==d)t[d].references++,t[d].updater(p);else{var h=o(p,n);n.byIndex=s,t.splice(s,0,{identifier:f,updater:h,references:1})}i.push(f)}return i}function o(e,t){var r=t.domAPI(t);return r.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;r.update(e=t)}else r.remove()}}e.exports=function(e,o){var a=n(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var s=r(a[i]);t[s].references--}for(var c=n(e,o),l=0;l<a.length;l++){var u=r(a[l]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}a=c}}},569:e=>{var t={};e.exports=function(e,r){var n=function(e){if(void 0===t[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}(e);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(r)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,r)=>{e.exports=function(e){var t=r.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(r){!function(e,t,r){var n="";r.supports&&(n+="@supports (".concat(r.supports,") {")),r.media&&(n+="@media ".concat(r.media," {"));var o=void 0!==r.layer;o&&(n+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),n+=r.css,o&&(n+="}"),r.media&&(n+="}"),r.supports&&(n+="}");var a=r.sourceMap;a&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(n,e,t.options)}(t,e,r)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},851:function(e,t){var r=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,a){function i(e){try{c(n.next(e))}catch(e){a(e)}}function s(e){try{c(n.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(i,s)}c((n=n.apply(e,t||[])).next())}))},n=this&&this.__generator||function(e,t){var r,n,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function s(a){return function(s){return function(a){if(r)throw new TypeError("Generator is already executing.");for(;i;)try{if(r=1,n&&(o=2&a[0]?n.return:a[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,a[1])).done)return o;switch(n=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,n=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!((o=(o=i.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){i.label=a[1];break}if(6===a[0]&&i.label<o[1]){i.label=o[1],o=a;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(a);break}o[2]&&i.ops.pop(),i.trys.pop();continue}a=t.call(e,i)}catch(e){a=[6,e],n=0}finally{r=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,s])}}},o=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.fetchAsset=t.fetchAssets=void 0,t.fetchAssets=function(e,t){return r(this,void 0,void 0,(function(){var r,a,s,c,l,u,f,d,p,h;return n(this,(function(n){switch(n.label){case 0:r={},t(0),a=Object.keys(e),s=0,n.label=1;case 1:n.trys.push([1,6,7,8]),c=o(a),l=c.next(),n.label=2;case 2:return l.done?[3,5]:(u=l.value,s++,t(s/a.length),[4,i(e[u])]);case 3:(f=n.sent())&&(r[u]=f),n.label=4;case 4:return l=c.next(),[3,2];case 5:return[3,8];case 6:return d=n.sent(),p={error:d},[3,8];case 7:try{l&&!l.done&&(h=c.return)&&h.call(c)}finally{if(p)throw p.error}return[7];case 8:return t(1),[2,r]}}))}))};var a=new Set;function i(e){return r(this,void 0,void 0,(function(){var t=this;return n(this,(function(o){return[2,new Promise((function(o){return r(t,void 0,void 0,(function(){var t,r,i,c,l;return n(this,(function(n){switch(n.label){case 0:return n.trys.push([0,5,,6]),s(e,"jpg","png","gif","svg")?((t=new Image).crossOrigin="anonymous",t.onload=function(){return o(t)},t.onerror=function(t){console.error('Unable to load image "'+e+'":',e),console.error(t),o(void 0)},t.src=e,[3,4]):[3,1];case 1:return s(e,"ogg","wav","mp3")?(r=document.createElement("audio"),i=function(){a.has(r)||(a.add(r),o(r))},r.addEventListener("canplay",i),r.addEventListener("loadeddata",i),window.setTimeout(i,3e3),r.addEventListener("error",(function(t){console.error('Unable to load sound "'+e+'":',e),console.error(t),o(void 0)})),r.src=e,console.log("Loading audio: ",e),[3,4]):[3,2];case 2:return[4,fetch(e)];case 3:c=n.sent(),o(s(e,"json")?c.json():c.text()),n.label=4;case 4:return[3,6];case 5:return l=n.sent(),console.error('Unable to load "'.concat(e,'"!'),l),o(void 0),[3,6];case 6:return[2]}}))}))}))]}))}))}function s(e){for(var t,r,n=[],a=1;a<arguments.length;a++)n[a-1]=arguments[a];try{for(var i=o(n),s=i.next();!s.done;s=i.next()){var c=s.value;if(e.endsWith(".".concat(c)))return!0}}catch(e){t={error:e}}finally{try{s&&!s.done&&(r=i.return)&&r.call(i)}finally{if(t)throw t.error}}return!1}t.fetchAsset=i},465:function(e,t,r){var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,a){function i(e){try{c(n.next(e))}catch(e){a(e)}}function s(e){try{c(n.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(i,s)}c((n=n.apply(e,t||[])).next())}))},o=this&&this.__generator||function(e,t){var r,n,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function s(a){return function(s){return function(a){if(r)throw new TypeError("Generator is already executing.");for(;i;)try{if(r=1,n&&(o=2&a[0]?n.return:a[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,a[1])).done)return o;switch(n=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,n=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!((o=(o=i.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){i.label=a[1];break}if(6===a[0]&&i.label<o[1]){i.label=o[1],o=a;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(a);break}o[2]&&i.ops.pop(),i.trys.pop();continue}a=t.call(e,i)}catch(e){a=[6,e],n=0}finally{r=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),r(981);var a=r(851),i=r(698),s={diamTexture:"assets/img/row-diam.png"};!function(){n(this,void 0,void 0,(function(){var e,t,r;return o(this,(function(n){switch(n.label){case 0:return console.log("Loading assets..."),e=function(){var e,t=document.createElement("progress");return t.setAttribute("id","tgd-progress"),t.setAttribute("min","0"),t.setAttribute("max","100"),null===(e=document.getElementById("tgd-logo"))||void 0===e||e.appendChild(t),t}(),[4,(0,a.fetchAssets)(s,(function(t){e.setAttribute("value","".concat(100*t))}))];case 1:if(t=n.sent(),console.log("Assets loaded."),!(r=document.getElementById("canvas")))throw Error("Unable to find main Canvas!");return(0,i.startApplication)(r,t),function(){var e=document.getElementById("tgd-logo");if(!e)throw Error("There is no splash screen!");e.style.setProperty("--duration","".concat(900,"ms")),e.classList.add("vanish"),window.setTimeout((function(){document.body.removeChild(e)}),900)}(),[2]}}))}))}()},698:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.startApplication=void 0;var o=n(r(875)),a=n(r(853));t.startApplication=function(e,t){var r=new o.default(e);r.setPainters([new a.default(r.gl,t)]),r.play()}},996:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e){this.gl=e;var t=e.createBuffer();if(!t)throw Error("Unable to create WebGL Buffer!");var r=e.createProgram();if(!r)throw Error("Unable to create a WebGL Program!");var i=n(e,e.VERTEX_SHADER,o),s=n(e,e.FRAGMENT_SHADER,a);e.attachShader(r,i),e.attachShader(r,s),e.linkProgram(r),this.prg=r,this.vertBuff=t}return e.prototype.destroy=function(){var e=this,t=e.gl,r=e.prg,n=e.vertBuff;t.deleteBuffer(n),t.deleteProgram(r),this.actualDestroy()},e.createDataArray=function(e){return new Float32Array(6*e)},e.pokeData=function(e,t,r,n,o,a,i,s){var c=6*t;e[c++]=r,e[c++]=n,e[c++]=o,e[c++]=a,e[c++]=i,e[c++]=s},e.prototype.pushData=function(e){var t=this.gl,r=this.vertBuff;t.bindBuffer(t.ARRAY_BUFFER,r),t.bufferData(t.ARRAY_BUFFER,e,t.STATIC_DRAW)},Object.defineProperty(e.prototype,"$uniSize",{set:function(e){var t=this.gl,r=this.prg,n=t.getUniformLocation(r,"uniSize");t.uniform1f(n,e)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"$uniTime",{set:function(e){var t=this.gl,r=this.prg,n=t.getUniformLocation(r,"uniTime");t.uniform1f(n,e)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"$uniTexture",{set:function(e){var t=this.gl,r=this.prg,n=t.getUniformLocation(r,"uniTexture");t.activeTexture(t.TEXTURE0),t.bindTexture(t.TEXTURE_2D,e),t.uniform1i(n,0)},enumerable:!1,configurable:!0}),e.prototype.paint=function(e){var t=this.gl,r=this.prg;t.useProgram(r);var n=Float32Array.BYTES_PER_ELEMENT,o=6*n;t.bindBuffer(t.ARRAY_BUFFER,this.vertBuff),t.enableVertexAttribArray(0),t.vertexAttribPointer(0,1,t.FLOAT,!1,o,0*n),t.enableVertexAttribArray(1),t.vertexAttribPointer(1,1,t.FLOAT,!1,o,1*n),t.enableVertexAttribArray(2),t.vertexAttribPointer(2,1,t.FLOAT,!1,o,2*n),t.enableVertexAttribArray(3),t.vertexAttribPointer(3,1,t.FLOAT,!1,o,3*n),t.enableVertexAttribArray(4),t.vertexAttribPointer(4,1,t.FLOAT,!1,o,4*n),t.enableVertexAttribArray(5),t.vertexAttribPointer(5,1,t.FLOAT,!1,o,5*n),this.actualPaint(e)},e}();function n(e,t,r){var n,o=e.createShader(t);if(!o)throw Error("Unable to create WebGL Shader!");if(e.shaderSource(o,r),e.compileShader(o),!e.getShaderParameter(o,e.COMPILE_STATUS))throw console.log(r),console.error("An error occurred compiling the shader: ",e.getShaderInfoLog(o)),Error(null!==(n=e.getShaderInfoLog(o))&&void 0!==n?n:"Unknow error while compiling the shader!");return o}t.default=r;var o="precision mediump float;\nuniform float uniTime;\nuniform float uniSize;\nattribute float attX;\nattribute float attY;\nattribute float attZ;\nattribute float attW;\nattribute float attSpeed;\nattribute float attIndex;\nvarying float varU;\nvarying float varZ;\nvarying float varHueShift;\nvoid main(){varZ=attZ;\nvarU=floor(mod(16.0*attIndex+uniTime*0.02,16.0))*0.0625;\nvarHueShift=attIndex*360.0;\nfloat z=varZ;\nfloat speed=attSpeed;\nfloat y=sin(uniTime*speed+attY);\ngl_Position=vec4(attX,y,attZ,attW);\ngl_PointSize=uniSize/attW;}",a="precision mediump float;\nuniform sampler2D uniTexture;\nvarying float varHueShift;\nvarying float varU;\nvarying float varZ;\nvec4 rgb2hsl(vec4 color){float L=max(color.r,max(color.g,color.b));\nfloat m=min(color.r,min(color.g,color.b));\nfloat C=L-m;\nfloat H=0.0;\nif(C > 0.0){if(L==color.r){H=60.0*mod((color.g-color.b)/C,6.0);}else if(L==color.g){H=60.0*mod(2.0+(color.b-color.r)/C,6.0);}else{H=60.0*mod(4.0+(color.r-color.g)/C,6.0);}}float S=0.0;\nif(L > 0.0){S=C/L;}return vec4(H,S,L,color.a);}vec4 hsl2rgb(vec4 color){float H=mod(color.x,360.0);\nfloat S=color.y;\nfloat L=color.z;\nfloat C=L*S;\nfloat X=C*(1.0-abs(mod(H/60.0,2.0)-1.0));\nfloat R=0.0;\nfloat G=0.0;\nfloat B=0.0;\nif(H < 180.0){if(H < 60.0){R=C;\nG=X;}else if(H < 120.0){R=X;\nG=C;}else{G=C;\nB=X;}}else{if(H < 240.0){G=X;\nB=C;}else if(H < 300.0){R=X;\nB=C;}else{R=C;\nB=X;}}float m=L-C;\nreturn vec4(R+m,G+m,B+m,color.a);}void main(){vec4 color=texture2D(uniTexture,vec2(varU+gl_PointCoord.x*0.0625,gl_PointCoord.y));\nif(color.a < 0.01)discard;\nvec4 hsl=rgb2hsl(color);\nhsl.x+=varHueShift;\nhsl.z*=1.3*varZ;\nvec4 rgb=hsl2rgb(hsl);\ngl_FragColor=rgb;}"},853:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),a=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var s=r(594),c=r(919),l=i(r(996)),u=150,f=function(e){function t(t,r){var n=e.call(this,t)||this;return n.initializeData(u),function(e){(0,s.assertObject)(e);var t=e.diamTexture;(0,s.assertImage)(t,"data.diamTexture")}(r),n.texture=(0,c.createTextureFromImage)(t,r.diamTexture),n}return o(t,e),t.prototype.actualDestroy=function(){this.gl.deleteTexture(this.texture)},t.prototype.actualPaint=function(e){var t=this.gl;t.enable(t.BLEND),t.blendFunc(t.SRC_ALPHA,t.ONE_MINUS_SRC_ALPHA),this.$uniSize=.15*Math.min(t.canvas.clientWidth,t.canvas.clientHeight),this.$uniTime=e,this.$uniTexture=this.texture,t.drawArrays(t.POINTS,0,u)},t.prototype.initializeData=function(e){for(var r,n,o=t.createDataArray(u),i=[],s=0;s<u;s++)i.push(.2+.8*Math.random());i.sort();var c=0;try{for(var l=a(i),f=l.next();!f.done;f=l.next()){var d=f.value,p=2*Math.random()-1,h=20*Math.random(),m=1/d,A=1e-4*(2+Math.random());t.pokeData(o,c++,p,h,d,m,A,Math.random())}}catch(e){r={error:e}}finally{try{f&&!f.done&&(n=l.return)&&n.call(l)}finally{if(r)throw r.error}}this.pushData(o)},t}(l.default);t.default=f},594:(e,t)=>{function r(e){return!Array.isArray(e)&&"object"==typeof e}function n(e){return"string"==typeof e}Object.defineProperty(t,"__esModule",{value:!0}),t.assertImage=t.assertString=t.isString=t.assertObject=t.isObject=void 0,t.isObject=r,t.assertObject=function(e,t){if(void 0===t&&(t="data"),!r(e))throw Error("".concat(t," was expected to be an object but we got ").concat(typeof e,"!"))},t.isString=n,t.assertString=function(e,t){if(void 0===t&&(t="data"),!n(e))throw Error("".concat(t," was expected to be a string but we got ").concat(typeof e,"!"))},t.assertImage=function(e,t){if(void 0===t&&(t="data"),!(e instanceof HTMLImageElement))throw Error("".concat(t," was expected to be an Image but we got ").concat(typeof e,"!"))}},875:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(319);Object.defineProperty(t,"default",{enumerable:!0,get:function(){return n(o).default}})},319:function(e,t){var r=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e){var t=this;this.canvas=e,this.painters=[],this.playing=!1,this.paint=function(e){var n,o;try{for(var a=r(t.painters),i=a.next();!i.done;i=a.next())i.value.paint(e)}catch(e){n={error:e}}finally{try{i&&!i.done&&(o=a.return)&&o.call(a)}finally{if(n)throw n.error}}};var n=e.getContext("webgl");if(!n)throw Error("Unable to create WebGL Context!");this.gl=n,new ResizeObserver((function(n){var o,a;try{for(var i=r(n),s=i.next();!s.done;s=i.next())if(s.value.target===e){var c=e.clientWidth,l=e.clientHeight;t.resize(c,l)}}catch(e){o={error:e}}finally{try{s&&!s.done&&(a=i.return)&&a.call(i)}finally{if(o)throw o.error}}})).observe(e)}return e.prototype.setPainters=function(e){this.painters=e},e.prototype.play=function(){var e=this;if(!this.playing){this.playing=!0;var t=function(r){e.paint(r),e.playing&&window.requestAnimationFrame(t)};window.requestAnimationFrame(t)}},e.prototype.stop=function(){this.playing=!1},e.prototype.resize=function(e,t){var r=this;window.requestAnimationFrame((function(){var n=r,o=n.gl,a=n.canvas;a.setAttribute("width","".concat(e)),a.setAttribute("height","".concat(t)),o.viewport(0,0,e,t)}))},e}();t.default=n},919:function(e,t,r){var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(910),t)},910:(e,t)=>{function r(e){var t=e.createTexture();if(!t)throw Error("Unable to create WebGL texture!");return t}Object.defineProperty(t,"__esModule",{value:!0}),t.textureRepeatVertical=t.textureRepeatHorizontal=t.textureRepeat=t.textureClampToEdgeVertical=t.textureClampToEdgeHorizontal=t.textureClampToEdge=t.createTextureFromImage=t.createTexture=void 0,t.createTexture=r,t.createTextureFromImage=function(e,t){var n=r(e);return e.bindTexture(e.TEXTURE_2D,n),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.NEAREST),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,t),n},t.textureClampToEdge=function(e,t){e.bindTexture(e.TEXTURE_2D,t),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE)},t.textureClampToEdgeHorizontal=function(e,t){e.bindTexture(e.TEXTURE_2D,t),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE)},t.textureClampToEdgeVertical=function(e,t){e.bindTexture(e.TEXTURE_2D,t),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE)},t.textureRepeat=function(e,t){e.bindTexture(e.TEXTURE_2D,t),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.REPEAT),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.REPEAT)},t.textureRepeatHorizontal=function(e,t){e.bindTexture(e.TEXTURE_2D,t),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.REPEAT)},t.textureRepeatVertical=function(e,t){e.bindTexture(e.TEXTURE_2D,t),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.REPEAT)}}},e=>{e(e.s=465)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,